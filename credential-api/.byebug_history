continue
next
continue
e
next
exit
e
continue
continuie
e
next
continue
policy_scope(Event).joins(:institution).where(institution: { id: @institution.id })
policy_scope(Event)
continue
policy_scope(Event)
continue
conitnue
policy_scope(Event)
continue
    params.require(:entity).permit(:active, :entity_type_id, :name, metadata: {}).to_h
params.require(:entity).permit(:active, :entity_type_id, :name, metadata: {})
params.require(:entity).permit(:active, :entity_type_id, :name, metadata: [])
params.require(:entity).permit(:active, :entity_type_id, metadata: {}, :name)
params.require(:entity).permit(:active, :entity_type_id, :metadata, :name)
params
continue
scope.joins(:institution)
scope.joins(:institution).all.size
scope.joins(:institution).all
scope.joins(:institution)
scope.joins(:institution).all
scope.joins(institutions: [roles: :user]).all
scope.all
scope.joins(institution: [roles: :user]).all
scope.joins(institution: [roles: :user]).where(user: { id: user.try(:id) }).all
scope.joins(institution: [roles: :user]).where(user: { id: user.try(:id) })
scope.joins(institution: [roles: :user])
continue
policy_scope(Institution).find(:institution_id)
continue
policy_scope(Institution)
continue
policy_scope(Institution)
policy_scope(Institution
continue
policy_scope(Institution)
policy_scope(@current_user, Institution)
policy_scope(Institution)
continue
institution.save!
self.institution = Institution.new(attributes)
continue
User.find(jwt_payload["user_id"])
User.find_by(jwt_payload["user_id"])
jwt_payload["user_id"]
User.find_by(jwt_payload["user_id"])
User.find_by_email(jwt_payload["user_id"])
jwt_payload
User.find_by_email(jwt_payload['user_id'])
jwt_payload
next
token
next
continue
exit
exception
next
exit
continue
exception
next
continue
